/**
 *
 *  Menu.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Menu.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string Menu::Cols::_id = "id";
const std::string Menu::Cols::_name = "name";
const std::string Menu::Cols::_first1 = "first1";
const std::string Menu::Cols::_first2 = "first2";
const std::string Menu::Cols::_first3 = "first3";
const std::string Menu::Cols::_first4 = "first4";
const std::string Menu::Cols::_first5 = "first5";
const std::string Menu::Cols::_first6 = "first6";
const std::string Menu::Cols::_first7 = "first7";
const std::string Menu::Cols::_first8 = "first8";
const std::string Menu::Cols::_first9 = "first9";
const std::string Menu::Cols::_first10 = "first10";
const std::string Menu::Cols::_second1 = "second1";
const std::string Menu::Cols::_second2 = "second2";
const std::string Menu::Cols::_second3 = "second3";
const std::string Menu::Cols::_second4 = "second4";
const std::string Menu::Cols::_second5 = "second5";
const std::string Menu::Cols::_second6 = "second6";
const std::string Menu::Cols::_second7 = "second7";
const std::string Menu::Cols::_second8 = "second8";
const std::string Menu::Cols::_second9 = "second9";
const std::string Menu::Cols::_second10 = "second10";
const std::string Menu::Cols::_comment1 = "comment1";
const std::string Menu::Cols::_comment2 = "comment2";
const std::string Menu::Cols::_comment3 = "comment3";
const std::string Menu::Cols::_enabled = "enabled";
const std::string Menu::primaryKeyName = "id";
const bool Menu::hasPrimaryKey = true;
const std::string Menu::tableName = "menu";

const std::vector<typename Menu::MetaData> Menu::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"name","std::string","text",0,0,0,1},
{"first1","std::string","text",0,0,0,1},
{"first2","std::string","text",0,0,0,1},
{"first3","std::string","text",0,0,0,1},
{"first4","std::string","text",0,0,0,1},
{"first5","std::string","text",0,0,0,1},
{"first6","std::string","text",0,0,0,1},
{"first7","std::string","text",0,0,0,1},
{"first8","std::string","text",0,0,0,1},
{"first9","std::string","text",0,0,0,1},
{"first10","std::string","text",0,0,0,1},
{"second1","std::string","text",0,0,0,1},
{"second2","std::string","text",0,0,0,1},
{"second3","std::string","text",0,0,0,1},
{"second4","std::string","text",0,0,0,1},
{"second5","std::string","text",0,0,0,1},
{"second6","std::string","text",0,0,0,1},
{"second7","std::string","text",0,0,0,1},
{"second8","std::string","text",0,0,0,1},
{"second9","std::string","text",0,0,0,1},
{"second10","std::string","text",0,0,0,1},
{"comment1","std::string","text",0,0,0,1},
{"comment2","std::string","text",0,0,0,1},
{"comment3","std::string","text",0,0,0,1},
{"enabled","uint64_t","integer",8,0,0,1}
};
const std::string &Menu::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Menu::Menu(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["first1"].isNull())
        {
            first1_=std::make_shared<std::string>(r["first1"].as<std::string>());
        }
        if(!r["first2"].isNull())
        {
            first2_=std::make_shared<std::string>(r["first2"].as<std::string>());
        }
        if(!r["first3"].isNull())
        {
            first3_=std::make_shared<std::string>(r["first3"].as<std::string>());
        }
        if(!r["first4"].isNull())
        {
            first4_=std::make_shared<std::string>(r["first4"].as<std::string>());
        }
        if(!r["first5"].isNull())
        {
            first5_=std::make_shared<std::string>(r["first5"].as<std::string>());
        }
        if(!r["first6"].isNull())
        {
            first6_=std::make_shared<std::string>(r["first6"].as<std::string>());
        }
        if(!r["first7"].isNull())
        {
            first7_=std::make_shared<std::string>(r["first7"].as<std::string>());
        }
        if(!r["first8"].isNull())
        {
            first8_=std::make_shared<std::string>(r["first8"].as<std::string>());
        }
        if(!r["first9"].isNull())
        {
            first9_=std::make_shared<std::string>(r["first9"].as<std::string>());
        }
        if(!r["first10"].isNull())
        {
            first10_=std::make_shared<std::string>(r["first10"].as<std::string>());
        }
        if(!r["second1"].isNull())
        {
            second1_=std::make_shared<std::string>(r["second1"].as<std::string>());
        }
        if(!r["second2"].isNull())
        {
            second2_=std::make_shared<std::string>(r["second2"].as<std::string>());
        }
        if(!r["second3"].isNull())
        {
            second3_=std::make_shared<std::string>(r["second3"].as<std::string>());
        }
        if(!r["second4"].isNull())
        {
            second4_=std::make_shared<std::string>(r["second4"].as<std::string>());
        }
        if(!r["second5"].isNull())
        {
            second5_=std::make_shared<std::string>(r["second5"].as<std::string>());
        }
        if(!r["second6"].isNull())
        {
            second6_=std::make_shared<std::string>(r["second6"].as<std::string>());
        }
        if(!r["second7"].isNull())
        {
            second7_=std::make_shared<std::string>(r["second7"].as<std::string>());
        }
        if(!r["second8"].isNull())
        {
            second8_=std::make_shared<std::string>(r["second8"].as<std::string>());
        }
        if(!r["second9"].isNull())
        {
            second9_=std::make_shared<std::string>(r["second9"].as<std::string>());
        }
        if(!r["second10"].isNull())
        {
            second10_=std::make_shared<std::string>(r["second10"].as<std::string>());
        }
        if(!r["comment1"].isNull())
        {
            comment1_=std::make_shared<std::string>(r["comment1"].as<std::string>());
        }
        if(!r["comment2"].isNull())
        {
            comment2_=std::make_shared<std::string>(r["comment2"].as<std::string>());
        }
        if(!r["comment3"].isNull())
        {
            comment3_=std::make_shared<std::string>(r["comment3"].as<std::string>());
        }
        if(!r["enabled"].isNull())
        {
            enabled_=std::make_shared<uint64_t>(r["enabled"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 26 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            first1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            first2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            first3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            first4_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            first5_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            first6_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            first7_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            first8_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            first9_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            first10_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            second1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            second2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            second3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            second4_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            second5_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            second6_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            second7_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            second8_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            second9_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 21;
        if(!r[index].isNull())
        {
            second10_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 22;
        if(!r[index].isNull())
        {
            comment1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 23;
        if(!r[index].isNull())
        {
            comment2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 24;
        if(!r[index].isNull())
        {
            comment3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 25;
        if(!r[index].isNull())
        {
            enabled_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Menu::Menu(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 26)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            first1_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            first2_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            first3_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            first4_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            first5_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            first6_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            first7_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            first8_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            first9_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            first10_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            second1_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            second2_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            second3_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            second4_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            second5_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            second6_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            second7_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            second8_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            second9_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            second10_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            comment1_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            comment2_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            comment3_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            enabled_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[25]].asUInt64());
        }
    }
}

Menu::Menu(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("first1"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["first1"].isNull())
        {
            first1_=std::make_shared<std::string>(pJson["first1"].asString());
        }
    }
    if(pJson.isMember("first2"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["first2"].isNull())
        {
            first2_=std::make_shared<std::string>(pJson["first2"].asString());
        }
    }
    if(pJson.isMember("first3"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["first3"].isNull())
        {
            first3_=std::make_shared<std::string>(pJson["first3"].asString());
        }
    }
    if(pJson.isMember("first4"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["first4"].isNull())
        {
            first4_=std::make_shared<std::string>(pJson["first4"].asString());
        }
    }
    if(pJson.isMember("first5"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["first5"].isNull())
        {
            first5_=std::make_shared<std::string>(pJson["first5"].asString());
        }
    }
    if(pJson.isMember("first6"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["first6"].isNull())
        {
            first6_=std::make_shared<std::string>(pJson["first6"].asString());
        }
    }
    if(pJson.isMember("first7"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["first7"].isNull())
        {
            first7_=std::make_shared<std::string>(pJson["first7"].asString());
        }
    }
    if(pJson.isMember("first8"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["first8"].isNull())
        {
            first8_=std::make_shared<std::string>(pJson["first8"].asString());
        }
    }
    if(pJson.isMember("first9"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["first9"].isNull())
        {
            first9_=std::make_shared<std::string>(pJson["first9"].asString());
        }
    }
    if(pJson.isMember("first10"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["first10"].isNull())
        {
            first10_=std::make_shared<std::string>(pJson["first10"].asString());
        }
    }
    if(pJson.isMember("second1"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["second1"].isNull())
        {
            second1_=std::make_shared<std::string>(pJson["second1"].asString());
        }
    }
    if(pJson.isMember("second2"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["second2"].isNull())
        {
            second2_=std::make_shared<std::string>(pJson["second2"].asString());
        }
    }
    if(pJson.isMember("second3"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["second3"].isNull())
        {
            second3_=std::make_shared<std::string>(pJson["second3"].asString());
        }
    }
    if(pJson.isMember("second4"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["second4"].isNull())
        {
            second4_=std::make_shared<std::string>(pJson["second4"].asString());
        }
    }
    if(pJson.isMember("second5"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["second5"].isNull())
        {
            second5_=std::make_shared<std::string>(pJson["second5"].asString());
        }
    }
    if(pJson.isMember("second6"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["second6"].isNull())
        {
            second6_=std::make_shared<std::string>(pJson["second6"].asString());
        }
    }
    if(pJson.isMember("second7"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["second7"].isNull())
        {
            second7_=std::make_shared<std::string>(pJson["second7"].asString());
        }
    }
    if(pJson.isMember("second8"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["second8"].isNull())
        {
            second8_=std::make_shared<std::string>(pJson["second8"].asString());
        }
    }
    if(pJson.isMember("second9"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["second9"].isNull())
        {
            second9_=std::make_shared<std::string>(pJson["second9"].asString());
        }
    }
    if(pJson.isMember("second10"))
    {
        dirtyFlag_[21]=true;
        if(!pJson["second10"].isNull())
        {
            second10_=std::make_shared<std::string>(pJson["second10"].asString());
        }
    }
    if(pJson.isMember("comment1"))
    {
        dirtyFlag_[22]=true;
        if(!pJson["comment1"].isNull())
        {
            comment1_=std::make_shared<std::string>(pJson["comment1"].asString());
        }
    }
    if(pJson.isMember("comment2"))
    {
        dirtyFlag_[23]=true;
        if(!pJson["comment2"].isNull())
        {
            comment2_=std::make_shared<std::string>(pJson["comment2"].asString());
        }
    }
    if(pJson.isMember("comment3"))
    {
        dirtyFlag_[24]=true;
        if(!pJson["comment3"].isNull())
        {
            comment3_=std::make_shared<std::string>(pJson["comment3"].asString());
        }
    }
    if(pJson.isMember("enabled"))
    {
        dirtyFlag_[25]=true;
        if(!pJson["enabled"].isNull())
        {
            enabled_=std::make_shared<uint64_t>((uint64_t)pJson["enabled"].asUInt64());
        }
    }
}

void Menu::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 26)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            first1_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            first2_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            first3_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            first4_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            first5_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            first6_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            first7_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            first8_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            first9_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            first10_=std::make_shared<std::string>(pJson[pMasqueradingVector[11]].asString());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            second1_=std::make_shared<std::string>(pJson[pMasqueradingVector[12]].asString());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            second2_=std::make_shared<std::string>(pJson[pMasqueradingVector[13]].asString());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            second3_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            second4_=std::make_shared<std::string>(pJson[pMasqueradingVector[15]].asString());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            second5_=std::make_shared<std::string>(pJson[pMasqueradingVector[16]].asString());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            second6_=std::make_shared<std::string>(pJson[pMasqueradingVector[17]].asString());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            second7_=std::make_shared<std::string>(pJson[pMasqueradingVector[18]].asString());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            second8_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            second9_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        dirtyFlag_[21] = true;
        if(!pJson[pMasqueradingVector[21]].isNull())
        {
            second10_=std::make_shared<std::string>(pJson[pMasqueradingVector[21]].asString());
        }
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        dirtyFlag_[22] = true;
        if(!pJson[pMasqueradingVector[22]].isNull())
        {
            comment1_=std::make_shared<std::string>(pJson[pMasqueradingVector[22]].asString());
        }
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        dirtyFlag_[23] = true;
        if(!pJson[pMasqueradingVector[23]].isNull())
        {
            comment2_=std::make_shared<std::string>(pJson[pMasqueradingVector[23]].asString());
        }
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        dirtyFlag_[24] = true;
        if(!pJson[pMasqueradingVector[24]].isNull())
        {
            comment3_=std::make_shared<std::string>(pJson[pMasqueradingVector[24]].asString());
        }
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        dirtyFlag_[25] = true;
        if(!pJson[pMasqueradingVector[25]].isNull())
        {
            enabled_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[25]].asUInt64());
        }
    }
}
                                                                    
void Menu::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("first1"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["first1"].isNull())
        {
            first1_=std::make_shared<std::string>(pJson["first1"].asString());
        }
    }
    if(pJson.isMember("first2"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["first2"].isNull())
        {
            first2_=std::make_shared<std::string>(pJson["first2"].asString());
        }
    }
    if(pJson.isMember("first3"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["first3"].isNull())
        {
            first3_=std::make_shared<std::string>(pJson["first3"].asString());
        }
    }
    if(pJson.isMember("first4"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["first4"].isNull())
        {
            first4_=std::make_shared<std::string>(pJson["first4"].asString());
        }
    }
    if(pJson.isMember("first5"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["first5"].isNull())
        {
            first5_=std::make_shared<std::string>(pJson["first5"].asString());
        }
    }
    if(pJson.isMember("first6"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["first6"].isNull())
        {
            first6_=std::make_shared<std::string>(pJson["first6"].asString());
        }
    }
    if(pJson.isMember("first7"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["first7"].isNull())
        {
            first7_=std::make_shared<std::string>(pJson["first7"].asString());
        }
    }
    if(pJson.isMember("first8"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["first8"].isNull())
        {
            first8_=std::make_shared<std::string>(pJson["first8"].asString());
        }
    }
    if(pJson.isMember("first9"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["first9"].isNull())
        {
            first9_=std::make_shared<std::string>(pJson["first9"].asString());
        }
    }
    if(pJson.isMember("first10"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["first10"].isNull())
        {
            first10_=std::make_shared<std::string>(pJson["first10"].asString());
        }
    }
    if(pJson.isMember("second1"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["second1"].isNull())
        {
            second1_=std::make_shared<std::string>(pJson["second1"].asString());
        }
    }
    if(pJson.isMember("second2"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["second2"].isNull())
        {
            second2_=std::make_shared<std::string>(pJson["second2"].asString());
        }
    }
    if(pJson.isMember("second3"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["second3"].isNull())
        {
            second3_=std::make_shared<std::string>(pJson["second3"].asString());
        }
    }
    if(pJson.isMember("second4"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["second4"].isNull())
        {
            second4_=std::make_shared<std::string>(pJson["second4"].asString());
        }
    }
    if(pJson.isMember("second5"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["second5"].isNull())
        {
            second5_=std::make_shared<std::string>(pJson["second5"].asString());
        }
    }
    if(pJson.isMember("second6"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["second6"].isNull())
        {
            second6_=std::make_shared<std::string>(pJson["second6"].asString());
        }
    }
    if(pJson.isMember("second7"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["second7"].isNull())
        {
            second7_=std::make_shared<std::string>(pJson["second7"].asString());
        }
    }
    if(pJson.isMember("second8"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["second8"].isNull())
        {
            second8_=std::make_shared<std::string>(pJson["second8"].asString());
        }
    }
    if(pJson.isMember("second9"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["second9"].isNull())
        {
            second9_=std::make_shared<std::string>(pJson["second9"].asString());
        }
    }
    if(pJson.isMember("second10"))
    {
        dirtyFlag_[21] = true;
        if(!pJson["second10"].isNull())
        {
            second10_=std::make_shared<std::string>(pJson["second10"].asString());
        }
    }
    if(pJson.isMember("comment1"))
    {
        dirtyFlag_[22] = true;
        if(!pJson["comment1"].isNull())
        {
            comment1_=std::make_shared<std::string>(pJson["comment1"].asString());
        }
    }
    if(pJson.isMember("comment2"))
    {
        dirtyFlag_[23] = true;
        if(!pJson["comment2"].isNull())
        {
            comment2_=std::make_shared<std::string>(pJson["comment2"].asString());
        }
    }
    if(pJson.isMember("comment3"))
    {
        dirtyFlag_[24] = true;
        if(!pJson["comment3"].isNull())
        {
            comment3_=std::make_shared<std::string>(pJson["comment3"].asString());
        }
    }
    if(pJson.isMember("enabled"))
    {
        dirtyFlag_[25] = true;
        if(!pJson["enabled"].isNull())
        {
            enabled_=std::make_shared<uint64_t>((uint64_t)pJson["enabled"].asUInt64());
        }
    }
}

const uint64_t &Menu::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Menu::getId() const noexcept
{
    return id_;
}
void Menu::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}



const typename Menu::PrimaryKeyType & Menu::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Menu::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getName() const noexcept
{
    return name_;
}
void Menu::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Menu::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}




const std::string &Menu::getValueOfFirst1() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first1_)
        return *first1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst1() const noexcept
{
    return first1_;
}
void Menu::setFirst1(const std::string &pFirst1) noexcept
{
    first1_ = std::make_shared<std::string>(pFirst1);
    dirtyFlag_[2] = true;
}
void Menu::setFirst1(std::string &&pFirst1) noexcept
{
    first1_ = std::make_shared<std::string>(std::move(pFirst1));
    dirtyFlag_[2] = true;
}




const std::string &Menu::getValueOfFirst2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first2_)
        return *first2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst2() const noexcept
{
    return first2_;
}
void Menu::setFirst2(const std::string &pFirst2) noexcept
{
    first2_ = std::make_shared<std::string>(pFirst2);
    dirtyFlag_[3] = true;
}
void Menu::setFirst2(std::string &&pFirst2) noexcept
{
    first2_ = std::make_shared<std::string>(std::move(pFirst2));
    dirtyFlag_[3] = true;
}




const std::string &Menu::getValueOfFirst3() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first3_)
        return *first3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst3() const noexcept
{
    return first3_;
}
void Menu::setFirst3(const std::string &pFirst3) noexcept
{
    first3_ = std::make_shared<std::string>(pFirst3);
    dirtyFlag_[4] = true;
}
void Menu::setFirst3(std::string &&pFirst3) noexcept
{
    first3_ = std::make_shared<std::string>(std::move(pFirst3));
    dirtyFlag_[4] = true;
}




const std::string &Menu::getValueOfFirst4() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first4_)
        return *first4_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst4() const noexcept
{
    return first4_;
}
void Menu::setFirst4(const std::string &pFirst4) noexcept
{
    first4_ = std::make_shared<std::string>(pFirst4);
    dirtyFlag_[5] = true;
}
void Menu::setFirst4(std::string &&pFirst4) noexcept
{
    first4_ = std::make_shared<std::string>(std::move(pFirst4));
    dirtyFlag_[5] = true;
}




const std::string &Menu::getValueOfFirst5() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first5_)
        return *first5_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst5() const noexcept
{
    return first5_;
}
void Menu::setFirst5(const std::string &pFirst5) noexcept
{
    first5_ = std::make_shared<std::string>(pFirst5);
    dirtyFlag_[6] = true;
}
void Menu::setFirst5(std::string &&pFirst5) noexcept
{
    first5_ = std::make_shared<std::string>(std::move(pFirst5));
    dirtyFlag_[6] = true;
}




const std::string &Menu::getValueOfFirst6() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first6_)
        return *first6_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst6() const noexcept
{
    return first6_;
}
void Menu::setFirst6(const std::string &pFirst6) noexcept
{
    first6_ = std::make_shared<std::string>(pFirst6);
    dirtyFlag_[7] = true;
}
void Menu::setFirst6(std::string &&pFirst6) noexcept
{
    first6_ = std::make_shared<std::string>(std::move(pFirst6));
    dirtyFlag_[7] = true;
}




const std::string &Menu::getValueOfFirst7() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first7_)
        return *first7_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst7() const noexcept
{
    return first7_;
}
void Menu::setFirst7(const std::string &pFirst7) noexcept
{
    first7_ = std::make_shared<std::string>(pFirst7);
    dirtyFlag_[8] = true;
}
void Menu::setFirst7(std::string &&pFirst7) noexcept
{
    first7_ = std::make_shared<std::string>(std::move(pFirst7));
    dirtyFlag_[8] = true;
}




const std::string &Menu::getValueOfFirst8() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first8_)
        return *first8_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst8() const noexcept
{
    return first8_;
}
void Menu::setFirst8(const std::string &pFirst8) noexcept
{
    first8_ = std::make_shared<std::string>(pFirst8);
    dirtyFlag_[9] = true;
}
void Menu::setFirst8(std::string &&pFirst8) noexcept
{
    first8_ = std::make_shared<std::string>(std::move(pFirst8));
    dirtyFlag_[9] = true;
}




const std::string &Menu::getValueOfFirst9() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first9_)
        return *first9_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst9() const noexcept
{
    return first9_;
}
void Menu::setFirst9(const std::string &pFirst9) noexcept
{
    first9_ = std::make_shared<std::string>(pFirst9);
    dirtyFlag_[10] = true;
}
void Menu::setFirst9(std::string &&pFirst9) noexcept
{
    first9_ = std::make_shared<std::string>(std::move(pFirst9));
    dirtyFlag_[10] = true;
}




const std::string &Menu::getValueOfFirst10() const noexcept
{
    const static std::string defaultValue = std::string();
    if(first10_)
        return *first10_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getFirst10() const noexcept
{
    return first10_;
}
void Menu::setFirst10(const std::string &pFirst10) noexcept
{
    first10_ = std::make_shared<std::string>(pFirst10);
    dirtyFlag_[11] = true;
}
void Menu::setFirst10(std::string &&pFirst10) noexcept
{
    first10_ = std::make_shared<std::string>(std::move(pFirst10));
    dirtyFlag_[11] = true;
}




const std::string &Menu::getValueOfSecond1() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second1_)
        return *second1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond1() const noexcept
{
    return second1_;
}
void Menu::setSecond1(const std::string &pSecond1) noexcept
{
    second1_ = std::make_shared<std::string>(pSecond1);
    dirtyFlag_[12] = true;
}
void Menu::setSecond1(std::string &&pSecond1) noexcept
{
    second1_ = std::make_shared<std::string>(std::move(pSecond1));
    dirtyFlag_[12] = true;
}




const std::string &Menu::getValueOfSecond2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second2_)
        return *second2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond2() const noexcept
{
    return second2_;
}
void Menu::setSecond2(const std::string &pSecond2) noexcept
{
    second2_ = std::make_shared<std::string>(pSecond2);
    dirtyFlag_[13] = true;
}
void Menu::setSecond2(std::string &&pSecond2) noexcept
{
    second2_ = std::make_shared<std::string>(std::move(pSecond2));
    dirtyFlag_[13] = true;
}




const std::string &Menu::getValueOfSecond3() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second3_)
        return *second3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond3() const noexcept
{
    return second3_;
}
void Menu::setSecond3(const std::string &pSecond3) noexcept
{
    second3_ = std::make_shared<std::string>(pSecond3);
    dirtyFlag_[14] = true;
}
void Menu::setSecond3(std::string &&pSecond3) noexcept
{
    second3_ = std::make_shared<std::string>(std::move(pSecond3));
    dirtyFlag_[14] = true;
}




const std::string &Menu::getValueOfSecond4() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second4_)
        return *second4_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond4() const noexcept
{
    return second4_;
}
void Menu::setSecond4(const std::string &pSecond4) noexcept
{
    second4_ = std::make_shared<std::string>(pSecond4);
    dirtyFlag_[15] = true;
}
void Menu::setSecond4(std::string &&pSecond4) noexcept
{
    second4_ = std::make_shared<std::string>(std::move(pSecond4));
    dirtyFlag_[15] = true;
}




const std::string &Menu::getValueOfSecond5() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second5_)
        return *second5_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond5() const noexcept
{
    return second5_;
}
void Menu::setSecond5(const std::string &pSecond5) noexcept
{
    second5_ = std::make_shared<std::string>(pSecond5);
    dirtyFlag_[16] = true;
}
void Menu::setSecond5(std::string &&pSecond5) noexcept
{
    second5_ = std::make_shared<std::string>(std::move(pSecond5));
    dirtyFlag_[16] = true;
}




const std::string &Menu::getValueOfSecond6() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second6_)
        return *second6_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond6() const noexcept
{
    return second6_;
}
void Menu::setSecond6(const std::string &pSecond6) noexcept
{
    second6_ = std::make_shared<std::string>(pSecond6);
    dirtyFlag_[17] = true;
}
void Menu::setSecond6(std::string &&pSecond6) noexcept
{
    second6_ = std::make_shared<std::string>(std::move(pSecond6));
    dirtyFlag_[17] = true;
}




const std::string &Menu::getValueOfSecond7() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second7_)
        return *second7_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond7() const noexcept
{
    return second7_;
}
void Menu::setSecond7(const std::string &pSecond7) noexcept
{
    second7_ = std::make_shared<std::string>(pSecond7);
    dirtyFlag_[18] = true;
}
void Menu::setSecond7(std::string &&pSecond7) noexcept
{
    second7_ = std::make_shared<std::string>(std::move(pSecond7));
    dirtyFlag_[18] = true;
}




const std::string &Menu::getValueOfSecond8() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second8_)
        return *second8_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond8() const noexcept
{
    return second8_;
}
void Menu::setSecond8(const std::string &pSecond8) noexcept
{
    second8_ = std::make_shared<std::string>(pSecond8);
    dirtyFlag_[19] = true;
}
void Menu::setSecond8(std::string &&pSecond8) noexcept
{
    second8_ = std::make_shared<std::string>(std::move(pSecond8));
    dirtyFlag_[19] = true;
}




const std::string &Menu::getValueOfSecond9() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second9_)
        return *second9_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond9() const noexcept
{
    return second9_;
}
void Menu::setSecond9(const std::string &pSecond9) noexcept
{
    second9_ = std::make_shared<std::string>(pSecond9);
    dirtyFlag_[20] = true;
}
void Menu::setSecond9(std::string &&pSecond9) noexcept
{
    second9_ = std::make_shared<std::string>(std::move(pSecond9));
    dirtyFlag_[20] = true;
}




const std::string &Menu::getValueOfSecond10() const noexcept
{
    const static std::string defaultValue = std::string();
    if(second10_)
        return *second10_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getSecond10() const noexcept
{
    return second10_;
}
void Menu::setSecond10(const std::string &pSecond10) noexcept
{
    second10_ = std::make_shared<std::string>(pSecond10);
    dirtyFlag_[21] = true;
}
void Menu::setSecond10(std::string &&pSecond10) noexcept
{
    second10_ = std::make_shared<std::string>(std::move(pSecond10));
    dirtyFlag_[21] = true;
}




const std::string &Menu::getValueOfComment1() const noexcept
{
    const static std::string defaultValue = std::string();
    if(comment1_)
        return *comment1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getComment1() const noexcept
{
    return comment1_;
}
void Menu::setComment1(const std::string &pComment1) noexcept
{
    comment1_ = std::make_shared<std::string>(pComment1);
    dirtyFlag_[22] = true;
}
void Menu::setComment1(std::string &&pComment1) noexcept
{
    comment1_ = std::make_shared<std::string>(std::move(pComment1));
    dirtyFlag_[22] = true;
}




const std::string &Menu::getValueOfComment2() const noexcept
{
    const static std::string defaultValue = std::string();
    if(comment2_)
        return *comment2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getComment2() const noexcept
{
    return comment2_;
}
void Menu::setComment2(const std::string &pComment2) noexcept
{
    comment2_ = std::make_shared<std::string>(pComment2);
    dirtyFlag_[23] = true;
}
void Menu::setComment2(std::string &&pComment2) noexcept
{
    comment2_ = std::make_shared<std::string>(std::move(pComment2));
    dirtyFlag_[23] = true;
}




const std::string &Menu::getValueOfComment3() const noexcept
{
    const static std::string defaultValue = std::string();
    if(comment3_)
        return *comment3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Menu::getComment3() const noexcept
{
    return comment3_;
}
void Menu::setComment3(const std::string &pComment3) noexcept
{
    comment3_ = std::make_shared<std::string>(pComment3);
    dirtyFlag_[24] = true;
}
void Menu::setComment3(std::string &&pComment3) noexcept
{
    comment3_ = std::make_shared<std::string>(std::move(pComment3));
    dirtyFlag_[24] = true;
}




const uint64_t &Menu::getValueOfEnabled() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(enabled_)
        return *enabled_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Menu::getEnabled() const noexcept
{
    return enabled_;
}
void Menu::setEnabled(const uint64_t &pEnabled) noexcept
{
    enabled_ = std::make_shared<uint64_t>(pEnabled);
    dirtyFlag_[25] = true;
}




void Menu::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Menu::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "first1",
        "first2",
        "first3",
        "first4",
        "first5",
        "first6",
        "first7",
        "first8",
        "first9",
        "first10",
        "second1",
        "second2",
        "second3",
        "second4",
        "second5",
        "second6",
        "second7",
        "second8",
        "second9",
        "second10",
        "comment1",
        "comment2",
        "comment3",
        "enabled"
    };
    return inCols;
}

void Menu::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFirst1())
        {
            binder << getValueOfFirst1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFirst2())
        {
            binder << getValueOfFirst2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFirst3())
        {
            binder << getValueOfFirst3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFirst4())
        {
            binder << getValueOfFirst4();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getFirst5())
        {
            binder << getValueOfFirst5();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFirst6())
        {
            binder << getValueOfFirst6();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFirst7())
        {
            binder << getValueOfFirst7();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getFirst8())
        {
            binder << getValueOfFirst8();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getFirst9())
        {
            binder << getValueOfFirst9();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getFirst10())
        {
            binder << getValueOfFirst10();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSecond1())
        {
            binder << getValueOfSecond1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getSecond2())
        {
            binder << getValueOfSecond2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getSecond3())
        {
            binder << getValueOfSecond3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getSecond4())
        {
            binder << getValueOfSecond4();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getSecond5())
        {
            binder << getValueOfSecond5();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getSecond6())
        {
            binder << getValueOfSecond6();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSecond7())
        {
            binder << getValueOfSecond7();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getSecond8())
        {
            binder << getValueOfSecond8();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getSecond9())
        {
            binder << getValueOfSecond9();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getSecond10())
        {
            binder << getValueOfSecond10();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getComment1())
        {
            binder << getValueOfComment1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getComment2())
        {
            binder << getValueOfComment2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getComment3())
        {
            binder << getValueOfComment3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getEnabled())
        {
            binder << getValueOfEnabled();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Menu::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    if(dirtyFlag_[21])
    {
        ret.push_back(getColumnName(21));
    }
    if(dirtyFlag_[22])
    {
        ret.push_back(getColumnName(22));
    }
    if(dirtyFlag_[23])
    {
        ret.push_back(getColumnName(23));
    }
    if(dirtyFlag_[24])
    {
        ret.push_back(getColumnName(24));
    }
    if(dirtyFlag_[25])
    {
        ret.push_back(getColumnName(25));
    }
    return ret;
}

void Menu::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFirst1())
        {
            binder << getValueOfFirst1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFirst2())
        {
            binder << getValueOfFirst2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFirst3())
        {
            binder << getValueOfFirst3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFirst4())
        {
            binder << getValueOfFirst4();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getFirst5())
        {
            binder << getValueOfFirst5();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getFirst6())
        {
            binder << getValueOfFirst6();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getFirst7())
        {
            binder << getValueOfFirst7();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getFirst8())
        {
            binder << getValueOfFirst8();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getFirst9())
        {
            binder << getValueOfFirst9();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getFirst10())
        {
            binder << getValueOfFirst10();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getSecond1())
        {
            binder << getValueOfSecond1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getSecond2())
        {
            binder << getValueOfSecond2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getSecond3())
        {
            binder << getValueOfSecond3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getSecond4())
        {
            binder << getValueOfSecond4();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getSecond5())
        {
            binder << getValueOfSecond5();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getSecond6())
        {
            binder << getValueOfSecond6();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSecond7())
        {
            binder << getValueOfSecond7();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getSecond8())
        {
            binder << getValueOfSecond8();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getSecond9())
        {
            binder << getValueOfSecond9();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[21])
    {
        if(getSecond10())
        {
            binder << getValueOfSecond10();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[22])
    {
        if(getComment1())
        {
            binder << getValueOfComment1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[23])
    {
        if(getComment2())
        {
            binder << getValueOfComment2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[24])
    {
        if(getComment3())
        {
            binder << getValueOfComment3();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[25])
    {
        if(getEnabled())
        {
            binder << getValueOfEnabled();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Menu::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getFirst1())
    {
        ret["first1"]=getValueOfFirst1();
    }
    else
    {
        ret["first1"]=Json::Value();
    }
    if(getFirst2())
    {
        ret["first2"]=getValueOfFirst2();
    }
    else
    {
        ret["first2"]=Json::Value();
    }
    if(getFirst3())
    {
        ret["first3"]=getValueOfFirst3();
    }
    else
    {
        ret["first3"]=Json::Value();
    }
    if(getFirst4())
    {
        ret["first4"]=getValueOfFirst4();
    }
    else
    {
        ret["first4"]=Json::Value();
    }
    if(getFirst5())
    {
        ret["first5"]=getValueOfFirst5();
    }
    else
    {
        ret["first5"]=Json::Value();
    }
    if(getFirst6())
    {
        ret["first6"]=getValueOfFirst6();
    }
    else
    {
        ret["first6"]=Json::Value();
    }
    if(getFirst7())
    {
        ret["first7"]=getValueOfFirst7();
    }
    else
    {
        ret["first7"]=Json::Value();
    }
    if(getFirst8())
    {
        ret["first8"]=getValueOfFirst8();
    }
    else
    {
        ret["first8"]=Json::Value();
    }
    if(getFirst9())
    {
        ret["first9"]=getValueOfFirst9();
    }
    else
    {
        ret["first9"]=Json::Value();
    }
    if(getFirst10())
    {
        ret["first10"]=getValueOfFirst10();
    }
    else
    {
        ret["first10"]=Json::Value();
    }
    if(getSecond1())
    {
        ret["second1"]=getValueOfSecond1();
    }
    else
    {
        ret["second1"]=Json::Value();
    }
    if(getSecond2())
    {
        ret["second2"]=getValueOfSecond2();
    }
    else
    {
        ret["second2"]=Json::Value();
    }
    if(getSecond3())
    {
        ret["second3"]=getValueOfSecond3();
    }
    else
    {
        ret["second3"]=Json::Value();
    }
    if(getSecond4())
    {
        ret["second4"]=getValueOfSecond4();
    }
    else
    {
        ret["second4"]=Json::Value();
    }
    if(getSecond5())
    {
        ret["second5"]=getValueOfSecond5();
    }
    else
    {
        ret["second5"]=Json::Value();
    }
    if(getSecond6())
    {
        ret["second6"]=getValueOfSecond6();
    }
    else
    {
        ret["second6"]=Json::Value();
    }
    if(getSecond7())
    {
        ret["second7"]=getValueOfSecond7();
    }
    else
    {
        ret["second7"]=Json::Value();
    }
    if(getSecond8())
    {
        ret["second8"]=getValueOfSecond8();
    }
    else
    {
        ret["second8"]=Json::Value();
    }
    if(getSecond9())
    {
        ret["second9"]=getValueOfSecond9();
    }
    else
    {
        ret["second9"]=Json::Value();
    }
    if(getSecond10())
    {
        ret["second10"]=getValueOfSecond10();
    }
    else
    {
        ret["second10"]=Json::Value();
    }
    if(getComment1())
    {
        ret["comment1"]=getValueOfComment1();
    }
    else
    {
        ret["comment1"]=Json::Value();
    }
    if(getComment2())
    {
        ret["comment2"]=getValueOfComment2();
    }
    else
    {
        ret["comment2"]=Json::Value();
    }
    if(getComment3())
    {
        ret["comment3"]=getValueOfComment3();
    }
    else
    {
        ret["comment3"]=Json::Value();
    }
    if(getEnabled())
    {
        ret["enabled"]=(Json::UInt64)getValueOfEnabled();
    }
    else
    {
        ret["enabled"]=Json::Value();
    }
    return ret;
}

Json::Value Menu::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 26)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFirst1())
            {
                ret[pMasqueradingVector[2]]=getValueOfFirst1();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFirst2())
            {
                ret[pMasqueradingVector[3]]=getValueOfFirst2();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFirst3())
            {
                ret[pMasqueradingVector[4]]=getValueOfFirst3();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFirst4())
            {
                ret[pMasqueradingVector[5]]=getValueOfFirst4();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getFirst5())
            {
                ret[pMasqueradingVector[6]]=getValueOfFirst5();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getFirst6())
            {
                ret[pMasqueradingVector[7]]=getValueOfFirst6();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getFirst7())
            {
                ret[pMasqueradingVector[8]]=getValueOfFirst7();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getFirst8())
            {
                ret[pMasqueradingVector[9]]=getValueOfFirst8();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getFirst9())
            {
                ret[pMasqueradingVector[10]]=getValueOfFirst9();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getFirst10())
            {
                ret[pMasqueradingVector[11]]=getValueOfFirst10();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getSecond1())
            {
                ret[pMasqueradingVector[12]]=getValueOfSecond1();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getSecond2())
            {
                ret[pMasqueradingVector[13]]=getValueOfSecond2();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getSecond3())
            {
                ret[pMasqueradingVector[14]]=getValueOfSecond3();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getSecond4())
            {
                ret[pMasqueradingVector[15]]=getValueOfSecond4();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getSecond5())
            {
                ret[pMasqueradingVector[16]]=getValueOfSecond5();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getSecond6())
            {
                ret[pMasqueradingVector[17]]=getValueOfSecond6();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getSecond7())
            {
                ret[pMasqueradingVector[18]]=getValueOfSecond7();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getSecond8())
            {
                ret[pMasqueradingVector[19]]=getValueOfSecond8();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getSecond9())
            {
                ret[pMasqueradingVector[20]]=getValueOfSecond9();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[21].empty())
        {
            if(getSecond10())
            {
                ret[pMasqueradingVector[21]]=getValueOfSecond10();
            }
            else
            {
                ret[pMasqueradingVector[21]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[22].empty())
        {
            if(getComment1())
            {
                ret[pMasqueradingVector[22]]=getValueOfComment1();
            }
            else
            {
                ret[pMasqueradingVector[22]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[23].empty())
        {
            if(getComment2())
            {
                ret[pMasqueradingVector[23]]=getValueOfComment2();
            }
            else
            {
                ret[pMasqueradingVector[23]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[24].empty())
        {
            if(getComment3())
            {
                ret[pMasqueradingVector[24]]=getValueOfComment3();
            }
            else
            {
                ret[pMasqueradingVector[24]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[25].empty())
        {
            if(getEnabled())
            {
                ret[pMasqueradingVector[25]]=(Json::UInt64)getValueOfEnabled();
            }
            else
            {
                ret[pMasqueradingVector[25]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getFirst1())
    {
        ret["first1"]=getValueOfFirst1();
    }
    else
    {
        ret["first1"]=Json::Value();
    }
    if(getFirst2())
    {
        ret["first2"]=getValueOfFirst2();
    }
    else
    {
        ret["first2"]=Json::Value();
    }
    if(getFirst3())
    {
        ret["first3"]=getValueOfFirst3();
    }
    else
    {
        ret["first3"]=Json::Value();
    }
    if(getFirst4())
    {
        ret["first4"]=getValueOfFirst4();
    }
    else
    {
        ret["first4"]=Json::Value();
    }
    if(getFirst5())
    {
        ret["first5"]=getValueOfFirst5();
    }
    else
    {
        ret["first5"]=Json::Value();
    }
    if(getFirst6())
    {
        ret["first6"]=getValueOfFirst6();
    }
    else
    {
        ret["first6"]=Json::Value();
    }
    if(getFirst7())
    {
        ret["first7"]=getValueOfFirst7();
    }
    else
    {
        ret["first7"]=Json::Value();
    }
    if(getFirst8())
    {
        ret["first8"]=getValueOfFirst8();
    }
    else
    {
        ret["first8"]=Json::Value();
    }
    if(getFirst9())
    {
        ret["first9"]=getValueOfFirst9();
    }
    else
    {
        ret["first9"]=Json::Value();
    }
    if(getFirst10())
    {
        ret["first10"]=getValueOfFirst10();
    }
    else
    {
        ret["first10"]=Json::Value();
    }
    if(getSecond1())
    {
        ret["second1"]=getValueOfSecond1();
    }
    else
    {
        ret["second1"]=Json::Value();
    }
    if(getSecond2())
    {
        ret["second2"]=getValueOfSecond2();
    }
    else
    {
        ret["second2"]=Json::Value();
    }
    if(getSecond3())
    {
        ret["second3"]=getValueOfSecond3();
    }
    else
    {
        ret["second3"]=Json::Value();
    }
    if(getSecond4())
    {
        ret["second4"]=getValueOfSecond4();
    }
    else
    {
        ret["second4"]=Json::Value();
    }
    if(getSecond5())
    {
        ret["second5"]=getValueOfSecond5();
    }
    else
    {
        ret["second5"]=Json::Value();
    }
    if(getSecond6())
    {
        ret["second6"]=getValueOfSecond6();
    }
    else
    {
        ret["second6"]=Json::Value();
    }
    if(getSecond7())
    {
        ret["second7"]=getValueOfSecond7();
    }
    else
    {
        ret["second7"]=Json::Value();
    }
    if(getSecond8())
    {
        ret["second8"]=getValueOfSecond8();
    }
    else
    {
        ret["second8"]=Json::Value();
    }
    if(getSecond9())
    {
        ret["second9"]=getValueOfSecond9();
    }
    else
    {
        ret["second9"]=Json::Value();
    }
    if(getSecond10())
    {
        ret["second10"]=getValueOfSecond10();
    }
    else
    {
        ret["second10"]=Json::Value();
    }
    if(getComment1())
    {
        ret["comment1"]=getValueOfComment1();
    }
    else
    {
        ret["comment1"]=Json::Value();
    }
    if(getComment2())
    {
        ret["comment2"]=getValueOfComment2();
    }
    else
    {
        ret["comment2"]=Json::Value();
    }
    if(getComment3())
    {
        ret["comment3"]=getValueOfComment3();
    }
    else
    {
        ret["comment3"]=Json::Value();
    }
    if(getEnabled())
    {
        ret["enabled"]=(Json::UInt64)getValueOfEnabled();
    }
    else
    {
        ret["enabled"]=Json::Value();
    }
    return ret;
}

bool Menu::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    else
    {
        err="The name column cannot be null";
        return false;
    }
    if(pJson.isMember("first1"))
    {
        if(!validJsonOfField(2, "first1", pJson["first1"], err, true))
            return false;
    }
    else
    {
        err="The first1 column cannot be null";
        return false;
    }
    if(pJson.isMember("first2"))
    {
        if(!validJsonOfField(3, "first2", pJson["first2"], err, true))
            return false;
    }
    else
    {
        err="The first2 column cannot be null";
        return false;
    }
    if(pJson.isMember("first3"))
    {
        if(!validJsonOfField(4, "first3", pJson["first3"], err, true))
            return false;
    }
    else
    {
        err="The first3 column cannot be null";
        return false;
    }
    if(pJson.isMember("first4"))
    {
        if(!validJsonOfField(5, "first4", pJson["first4"], err, true))
            return false;
    }
    else
    {
        err="The first4 column cannot be null";
        return false;
    }
    if(pJson.isMember("first5"))
    {
        if(!validJsonOfField(6, "first5", pJson["first5"], err, true))
            return false;
    }
    else
    {
        err="The first5 column cannot be null";
        return false;
    }
    if(pJson.isMember("first6"))
    {
        if(!validJsonOfField(7, "first6", pJson["first6"], err, true))
            return false;
    }
    else
    {
        err="The first6 column cannot be null";
        return false;
    }
    if(pJson.isMember("first7"))
    {
        if(!validJsonOfField(8, "first7", pJson["first7"], err, true))
            return false;
    }
    else
    {
        err="The first7 column cannot be null";
        return false;
    }
    if(pJson.isMember("first8"))
    {
        if(!validJsonOfField(9, "first8", pJson["first8"], err, true))
            return false;
    }
    else
    {
        err="The first8 column cannot be null";
        return false;
    }
    if(pJson.isMember("first9"))
    {
        if(!validJsonOfField(10, "first9", pJson["first9"], err, true))
            return false;
    }
    else
    {
        err="The first9 column cannot be null";
        return false;
    }
    if(pJson.isMember("first10"))
    {
        if(!validJsonOfField(11, "first10", pJson["first10"], err, true))
            return false;
    }
    else
    {
        err="The first10 column cannot be null";
        return false;
    }
    if(pJson.isMember("second1"))
    {
        if(!validJsonOfField(12, "second1", pJson["second1"], err, true))
            return false;
    }
    else
    {
        err="The second1 column cannot be null";
        return false;
    }
    if(pJson.isMember("second2"))
    {
        if(!validJsonOfField(13, "second2", pJson["second2"], err, true))
            return false;
    }
    else
    {
        err="The second2 column cannot be null";
        return false;
    }
    if(pJson.isMember("second3"))
    {
        if(!validJsonOfField(14, "second3", pJson["second3"], err, true))
            return false;
    }
    else
    {
        err="The second3 column cannot be null";
        return false;
    }
    if(pJson.isMember("second4"))
    {
        if(!validJsonOfField(15, "second4", pJson["second4"], err, true))
            return false;
    }
    else
    {
        err="The second4 column cannot be null";
        return false;
    }
    if(pJson.isMember("second5"))
    {
        if(!validJsonOfField(16, "second5", pJson["second5"], err, true))
            return false;
    }
    else
    {
        err="The second5 column cannot be null";
        return false;
    }
    if(pJson.isMember("second6"))
    {
        if(!validJsonOfField(17, "second6", pJson["second6"], err, true))
            return false;
    }
    else
    {
        err="The second6 column cannot be null";
        return false;
    }
    if(pJson.isMember("second7"))
    {
        if(!validJsonOfField(18, "second7", pJson["second7"], err, true))
            return false;
    }
    else
    {
        err="The second7 column cannot be null";
        return false;
    }
    if(pJson.isMember("second8"))
    {
        if(!validJsonOfField(19, "second8", pJson["second8"], err, true))
            return false;
    }
    else
    {
        err="The second8 column cannot be null";
        return false;
    }
    if(pJson.isMember("second9"))
    {
        if(!validJsonOfField(20, "second9", pJson["second9"], err, true))
            return false;
    }
    else
    {
        err="The second9 column cannot be null";
        return false;
    }
    if(pJson.isMember("second10"))
    {
        if(!validJsonOfField(21, "second10", pJson["second10"], err, true))
            return false;
    }
    else
    {
        err="The second10 column cannot be null";
        return false;
    }
    if(pJson.isMember("comment1"))
    {
        if(!validJsonOfField(22, "comment1", pJson["comment1"], err, true))
            return false;
    }
    else
    {
        err="The comment1 column cannot be null";
        return false;
    }
    if(pJson.isMember("comment2"))
    {
        if(!validJsonOfField(23, "comment2", pJson["comment2"], err, true))
            return false;
    }
    else
    {
        err="The comment2 column cannot be null";
        return false;
    }
    if(pJson.isMember("comment3"))
    {
        if(!validJsonOfField(24, "comment3", pJson["comment3"], err, true))
            return false;
    }
    else
    {
        err="The comment3 column cannot be null";
        return false;
    }
    if(pJson.isMember("enabled"))
    {
        if(!validJsonOfField(25, "enabled", pJson["enabled"], err, true))
            return false;
    }
    else
    {
        err="The enabled column cannot be null";
        return false;
    }
    return true;
}
bool Menu::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 26)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[11].empty())
    {
        if(pJson.isMember(pMasqueradingVector[11]))
        {
            if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[12].empty())
    {
        if(pJson.isMember(pMasqueradingVector[12]))
        {
            if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[13].empty())
    {
        if(pJson.isMember(pMasqueradingVector[13]))
        {
            if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[13] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[14].empty())
    {
        if(pJson.isMember(pMasqueradingVector[14]))
        {
            if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[14] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[15].empty())
    {
        if(pJson.isMember(pMasqueradingVector[15]))
        {
            if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[15] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[16].empty())
    {
        if(pJson.isMember(pMasqueradingVector[16]))
        {
            if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[16] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[17].empty())
    {
        if(pJson.isMember(pMasqueradingVector[17]))
        {
            if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[17] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[18].empty())
    {
        if(pJson.isMember(pMasqueradingVector[18]))
        {
            if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[18] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[19].empty())
    {
        if(pJson.isMember(pMasqueradingVector[19]))
        {
            if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[19] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[20].empty())
    {
        if(pJson.isMember(pMasqueradingVector[20]))
        {
            if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[20] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[21].empty())
    {
        if(pJson.isMember(pMasqueradingVector[21]))
        {
            if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[21] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[22].empty())
    {
        if(pJson.isMember(pMasqueradingVector[22]))
        {
            if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[22] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[23].empty())
    {
        if(pJson.isMember(pMasqueradingVector[23]))
        {
            if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[23] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[24].empty())
    {
        if(pJson.isMember(pMasqueradingVector[24]))
        {
            if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[24] + " column cannot be null";
            return false;
        }
    }
    if(!pMasqueradingVector[25].empty())
    {
        if(pJson.isMember(pMasqueradingVector[25]))
        {
            if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, true))
                return false;
        }
        else
        {
            err="The " + pMasqueradingVector[25] + " column cannot be null";
            return false;
        }
    }
    return true;
}
bool Menu::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("first1"))
    {
        if(!validJsonOfField(2, "first1", pJson["first1"], err, false))
            return false;
    }
    if(pJson.isMember("first2"))
    {
        if(!validJsonOfField(3, "first2", pJson["first2"], err, false))
            return false;
    }
    if(pJson.isMember("first3"))
    {
        if(!validJsonOfField(4, "first3", pJson["first3"], err, false))
            return false;
    }
    if(pJson.isMember("first4"))
    {
        if(!validJsonOfField(5, "first4", pJson["first4"], err, false))
            return false;
    }
    if(pJson.isMember("first5"))
    {
        if(!validJsonOfField(6, "first5", pJson["first5"], err, false))
            return false;
    }
    if(pJson.isMember("first6"))
    {
        if(!validJsonOfField(7, "first6", pJson["first6"], err, false))
            return false;
    }
    if(pJson.isMember("first7"))
    {
        if(!validJsonOfField(8, "first7", pJson["first7"], err, false))
            return false;
    }
    if(pJson.isMember("first8"))
    {
        if(!validJsonOfField(9, "first8", pJson["first8"], err, false))
            return false;
    }
    if(pJson.isMember("first9"))
    {
        if(!validJsonOfField(10, "first9", pJson["first9"], err, false))
            return false;
    }
    if(pJson.isMember("first10"))
    {
        if(!validJsonOfField(11, "first10", pJson["first10"], err, false))
            return false;
    }
    if(pJson.isMember("second1"))
    {
        if(!validJsonOfField(12, "second1", pJson["second1"], err, false))
            return false;
    }
    if(pJson.isMember("second2"))
    {
        if(!validJsonOfField(13, "second2", pJson["second2"], err, false))
            return false;
    }
    if(pJson.isMember("second3"))
    {
        if(!validJsonOfField(14, "second3", pJson["second3"], err, false))
            return false;
    }
    if(pJson.isMember("second4"))
    {
        if(!validJsonOfField(15, "second4", pJson["second4"], err, false))
            return false;
    }
    if(pJson.isMember("second5"))
    {
        if(!validJsonOfField(16, "second5", pJson["second5"], err, false))
            return false;
    }
    if(pJson.isMember("second6"))
    {
        if(!validJsonOfField(17, "second6", pJson["second6"], err, false))
            return false;
    }
    if(pJson.isMember("second7"))
    {
        if(!validJsonOfField(18, "second7", pJson["second7"], err, false))
            return false;
    }
    if(pJson.isMember("second8"))
    {
        if(!validJsonOfField(19, "second8", pJson["second8"], err, false))
            return false;
    }
    if(pJson.isMember("second9"))
    {
        if(!validJsonOfField(20, "second9", pJson["second9"], err, false))
            return false;
    }
    if(pJson.isMember("second10"))
    {
        if(!validJsonOfField(21, "second10", pJson["second10"], err, false))
            return false;
    }
    if(pJson.isMember("comment1"))
    {
        if(!validJsonOfField(22, "comment1", pJson["comment1"], err, false))
            return false;
    }
    if(pJson.isMember("comment2"))
    {
        if(!validJsonOfField(23, "comment2", pJson["comment2"], err, false))
            return false;
    }
    if(pJson.isMember("comment3"))
    {
        if(!validJsonOfField(24, "comment3", pJson["comment3"], err, false))
            return false;
    }
    if(pJson.isMember("enabled"))
    {
        if(!validJsonOfField(25, "enabled", pJson["enabled"], err, false))
            return false;
    }
    return true;
}
bool Menu::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 26)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
            return false;
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
            return false;
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
            return false;
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
            return false;
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
            return false;
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
            return false;
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
            return false;
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
            return false;
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
            return false;
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
            return false;
    }
    if(!pMasqueradingVector[21].empty() && pJson.isMember(pMasqueradingVector[21]))
    {
        if(!validJsonOfField(21, pMasqueradingVector[21], pJson[pMasqueradingVector[21]], err, false))
            return false;
    }
    if(!pMasqueradingVector[22].empty() && pJson.isMember(pMasqueradingVector[22]))
    {
        if(!validJsonOfField(22, pMasqueradingVector[22], pJson[pMasqueradingVector[22]], err, false))
            return false;
    }
    if(!pMasqueradingVector[23].empty() && pJson.isMember(pMasqueradingVector[23]))
    {
        if(!validJsonOfField(23, pMasqueradingVector[23], pJson[pMasqueradingVector[23]], err, false))
            return false;
    }
    if(!pMasqueradingVector[24].empty() && pJson.isMember(pMasqueradingVector[24]))
    {
        if(!validJsonOfField(24, pMasqueradingVector[24], pJson[pMasqueradingVector[24]], err, false))
            return false;
    }
    if(!pMasqueradingVector[25].empty() && pJson.isMember(pMasqueradingVector[25]))
    {
        if(!validJsonOfField(25, pMasqueradingVector[25], pJson[pMasqueradingVector[25]], err, false))
            return false;
    }
    return true;
}
bool Menu::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson, 
                            std::string &err, 
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 20:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 21:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 22:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 23:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 24:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;                
            }
            break;
        case 25:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
