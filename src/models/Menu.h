/**
 *
 *  Menu.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;
namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3 
{

class Menu
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _name;
        static const std::string _first1;
        static const std::string _first2;
        static const std::string _first3;
        static const std::string _first4;
        static const std::string _first5;
        static const std::string _first6;
        static const std::string _first7;
        static const std::string _first8;
        static const std::string _first9;
        static const std::string _first10;
        static const std::string _second1;
        static const std::string _second2;
        static const std::string _second3;
        static const std::string _second4;
        static const std::string _second5;
        static const std::string _second6;
        static const std::string _second7;
        static const std::string _second8;
        static const std::string _second9;
        static const std::string _second10;
        static const std::string _comment1;
        static const std::string _comment2;
        static const std::string _comment3;
        static const std::string _enabled;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Menu(const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Menu(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Menu(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Menu() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson, 
                          std::string &err, 
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;

    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;


    /**  For column name  */
    ///Get the value of the column name, returns the default value if the column is null
    const std::string &getValueOfName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getName() const noexcept;

    ///Set the value of the column name
    void setName(const std::string &pName) noexcept;
    void setName(std::string &&pName) noexcept;


    /**  For column first1  */
    ///Get the value of the column first1, returns the default value if the column is null
    const std::string &getValueOfFirst1() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst1() const noexcept;

    ///Set the value of the column first1
    void setFirst1(const std::string &pFirst1) noexcept;
    void setFirst1(std::string &&pFirst1) noexcept;


    /**  For column first2  */
    ///Get the value of the column first2, returns the default value if the column is null
    const std::string &getValueOfFirst2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst2() const noexcept;

    ///Set the value of the column first2
    void setFirst2(const std::string &pFirst2) noexcept;
    void setFirst2(std::string &&pFirst2) noexcept;


    /**  For column first3  */
    ///Get the value of the column first3, returns the default value if the column is null
    const std::string &getValueOfFirst3() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst3() const noexcept;

    ///Set the value of the column first3
    void setFirst3(const std::string &pFirst3) noexcept;
    void setFirst3(std::string &&pFirst3) noexcept;


    /**  For column first4  */
    ///Get the value of the column first4, returns the default value if the column is null
    const std::string &getValueOfFirst4() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst4() const noexcept;

    ///Set the value of the column first4
    void setFirst4(const std::string &pFirst4) noexcept;
    void setFirst4(std::string &&pFirst4) noexcept;


    /**  For column first5  */
    ///Get the value of the column first5, returns the default value if the column is null
    const std::string &getValueOfFirst5() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst5() const noexcept;

    ///Set the value of the column first5
    void setFirst5(const std::string &pFirst5) noexcept;
    void setFirst5(std::string &&pFirst5) noexcept;


    /**  For column first6  */
    ///Get the value of the column first6, returns the default value if the column is null
    const std::string &getValueOfFirst6() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst6() const noexcept;

    ///Set the value of the column first6
    void setFirst6(const std::string &pFirst6) noexcept;
    void setFirst6(std::string &&pFirst6) noexcept;


    /**  For column first7  */
    ///Get the value of the column first7, returns the default value if the column is null
    const std::string &getValueOfFirst7() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst7() const noexcept;

    ///Set the value of the column first7
    void setFirst7(const std::string &pFirst7) noexcept;
    void setFirst7(std::string &&pFirst7) noexcept;


    /**  For column first8  */
    ///Get the value of the column first8, returns the default value if the column is null
    const std::string &getValueOfFirst8() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst8() const noexcept;

    ///Set the value of the column first8
    void setFirst8(const std::string &pFirst8) noexcept;
    void setFirst8(std::string &&pFirst8) noexcept;


    /**  For column first9  */
    ///Get the value of the column first9, returns the default value if the column is null
    const std::string &getValueOfFirst9() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst9() const noexcept;

    ///Set the value of the column first9
    void setFirst9(const std::string &pFirst9) noexcept;
    void setFirst9(std::string &&pFirst9) noexcept;


    /**  For column first10  */
    ///Get the value of the column first10, returns the default value if the column is null
    const std::string &getValueOfFirst10() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFirst10() const noexcept;

    ///Set the value of the column first10
    void setFirst10(const std::string &pFirst10) noexcept;
    void setFirst10(std::string &&pFirst10) noexcept;


    /**  For column second1  */
    ///Get the value of the column second1, returns the default value if the column is null
    const std::string &getValueOfSecond1() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond1() const noexcept;

    ///Set the value of the column second1
    void setSecond1(const std::string &pSecond1) noexcept;
    void setSecond1(std::string &&pSecond1) noexcept;


    /**  For column second2  */
    ///Get the value of the column second2, returns the default value if the column is null
    const std::string &getValueOfSecond2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond2() const noexcept;

    ///Set the value of the column second2
    void setSecond2(const std::string &pSecond2) noexcept;
    void setSecond2(std::string &&pSecond2) noexcept;


    /**  For column second3  */
    ///Get the value of the column second3, returns the default value if the column is null
    const std::string &getValueOfSecond3() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond3() const noexcept;

    ///Set the value of the column second3
    void setSecond3(const std::string &pSecond3) noexcept;
    void setSecond3(std::string &&pSecond3) noexcept;


    /**  For column second4  */
    ///Get the value of the column second4, returns the default value if the column is null
    const std::string &getValueOfSecond4() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond4() const noexcept;

    ///Set the value of the column second4
    void setSecond4(const std::string &pSecond4) noexcept;
    void setSecond4(std::string &&pSecond4) noexcept;


    /**  For column second5  */
    ///Get the value of the column second5, returns the default value if the column is null
    const std::string &getValueOfSecond5() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond5() const noexcept;

    ///Set the value of the column second5
    void setSecond5(const std::string &pSecond5) noexcept;
    void setSecond5(std::string &&pSecond5) noexcept;


    /**  For column second6  */
    ///Get the value of the column second6, returns the default value if the column is null
    const std::string &getValueOfSecond6() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond6() const noexcept;

    ///Set the value of the column second6
    void setSecond6(const std::string &pSecond6) noexcept;
    void setSecond6(std::string &&pSecond6) noexcept;


    /**  For column second7  */
    ///Get the value of the column second7, returns the default value if the column is null
    const std::string &getValueOfSecond7() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond7() const noexcept;

    ///Set the value of the column second7
    void setSecond7(const std::string &pSecond7) noexcept;
    void setSecond7(std::string &&pSecond7) noexcept;


    /**  For column second8  */
    ///Get the value of the column second8, returns the default value if the column is null
    const std::string &getValueOfSecond8() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond8() const noexcept;

    ///Set the value of the column second8
    void setSecond8(const std::string &pSecond8) noexcept;
    void setSecond8(std::string &&pSecond8) noexcept;


    /**  For column second9  */
    ///Get the value of the column second9, returns the default value if the column is null
    const std::string &getValueOfSecond9() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond9() const noexcept;

    ///Set the value of the column second9
    void setSecond9(const std::string &pSecond9) noexcept;
    void setSecond9(std::string &&pSecond9) noexcept;


    /**  For column second10  */
    ///Get the value of the column second10, returns the default value if the column is null
    const std::string &getValueOfSecond10() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getSecond10() const noexcept;

    ///Set the value of the column second10
    void setSecond10(const std::string &pSecond10) noexcept;
    void setSecond10(std::string &&pSecond10) noexcept;


    /**  For column comment1  */
    ///Get the value of the column comment1, returns the default value if the column is null
    const std::string &getValueOfComment1() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComment1() const noexcept;

    ///Set the value of the column comment1
    void setComment1(const std::string &pComment1) noexcept;
    void setComment1(std::string &&pComment1) noexcept;


    /**  For column comment2  */
    ///Get the value of the column comment2, returns the default value if the column is null
    const std::string &getValueOfComment2() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComment2() const noexcept;

    ///Set the value of the column comment2
    void setComment2(const std::string &pComment2) noexcept;
    void setComment2(std::string &&pComment2) noexcept;


    /**  For column comment3  */
    ///Get the value of the column comment3, returns the default value if the column is null
    const std::string &getValueOfComment3() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getComment3() const noexcept;

    ///Set the value of the column comment3
    void setComment3(const std::string &pComment3) noexcept;
    void setComment3(std::string &&pComment3) noexcept;


    /**  For column enabled  */
    ///Get the value of the column enabled, returns the default value if the column is null
    const uint64_t &getValueOfEnabled() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getEnabled() const noexcept;

    ///Set the value of the column enabled
    void setEnabled(const uint64_t &pEnabled) noexcept;



    static size_t getColumnNumber() noexcept {  return 26;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend Mapper<Menu>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<std::string> name_;
    std::shared_ptr<std::string> first1_;
    std::shared_ptr<std::string> first2_;
    std::shared_ptr<std::string> first3_;
    std::shared_ptr<std::string> first4_;
    std::shared_ptr<std::string> first5_;
    std::shared_ptr<std::string> first6_;
    std::shared_ptr<std::string> first7_;
    std::shared_ptr<std::string> first8_;
    std::shared_ptr<std::string> first9_;
    std::shared_ptr<std::string> first10_;
    std::shared_ptr<std::string> second1_;
    std::shared_ptr<std::string> second2_;
    std::shared_ptr<std::string> second3_;
    std::shared_ptr<std::string> second4_;
    std::shared_ptr<std::string> second5_;
    std::shared_ptr<std::string> second6_;
    std::shared_ptr<std::string> second7_;
    std::shared_ptr<std::string> second8_;
    std::shared_ptr<std::string> second9_;
    std::shared_ptr<std::string> second10_;
    std::shared_ptr<std::string> comment1_;
    std::shared_ptr<std::string> comment2_;
    std::shared_ptr<std::string> comment3_;
    std::shared_ptr<uint64_t> enabled_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[26]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;                   
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[1])
        {
            sql += "name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "first1,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "first2,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "first3,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "first4,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "first5,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "first6,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "first7,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "first8,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "first9,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "first10,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "second1,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "second2,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "second3,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "second4,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "second5,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "second6,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "second7,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "second8,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "second9,";
            ++parametersCount;
        }
        if(dirtyFlag_[21])
        {
            sql += "second10,";
            ++parametersCount;
        }
        if(dirtyFlag_[22])
        {
            sql += "comment1,";
            ++parametersCount;
        }
        if(dirtyFlag_[23])
        {
            sql += "comment2,";
            ++parametersCount;
        }
        if(dirtyFlag_[24])
        {
            sql += "comment3,";
            ++parametersCount;
        }
        if(dirtyFlag_[25])
        {
            sql += "enabled,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";
        
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[21])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[22])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[23])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[24])
        {
            sql.append("?,");

        } 
        if(dirtyFlag_[25])
        {
            sql.append("?,");

        } 
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;   
    }
};
} // namespace sqlite3
} // namespace drogon_model
