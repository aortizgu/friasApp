/**
 *
 *  MenusConfig.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "MenusConfig.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon_model::sqlite3;

const std::string MenusConfig::Cols::_id = "id";
const std::string MenusConfig::Cols::_first_course_1_id = "first_course_1_id";
const std::string MenusConfig::Cols::_first_course_2_id = "first_course_2_id";
const std::string MenusConfig::Cols::_first_course_3_id = "first_course_3_id";
const std::string MenusConfig::Cols::_first_course_4_id = "first_course_4_id";
const std::string MenusConfig::Cols::_first_course_5_id = "first_course_5_id";
const std::string MenusConfig::Cols::_second_course_1_id = "second_course_1_id";
const std::string MenusConfig::Cols::_second_course_2_id = "second_course_2_id";
const std::string MenusConfig::Cols::_second_course_3_id = "second_course_3_id";
const std::string MenusConfig::Cols::_second_course_4_id = "second_course_4_id";
const std::string MenusConfig::Cols::_second_course_5_id = "second_course_5_id";
const std::string MenusConfig::primaryKeyName = "id";
const bool MenusConfig::hasPrimaryKey = true;
const std::string MenusConfig::tableName = "menus_config";

const std::vector<typename MenusConfig::MetaData> MenusConfig::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"first_course_1_id","uint64_t","integer",8,0,0,0},
{"first_course_2_id","uint64_t","integer",8,0,0,0},
{"first_course_3_id","uint64_t","integer",8,0,0,0},
{"first_course_4_id","uint64_t","integer",8,0,0,0},
{"first_course_5_id","uint64_t","integer",8,0,0,0},
{"second_course_1_id","uint64_t","integer",8,0,0,0},
{"second_course_2_id","uint64_t","integer",8,0,0,0},
{"second_course_3_id","uint64_t","integer",8,0,0,0},
{"second_course_4_id","uint64_t","integer",8,0,0,0},
{"second_course_5_id","uint64_t","integer",8,0,0,0}
};
const std::string &MenusConfig::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
MenusConfig::MenusConfig(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["first_course_1_id"].isNull())
        {
            firstCourse1Id_=std::make_shared<uint64_t>(r["first_course_1_id"].as<uint64_t>());
        }
        if(!r["first_course_2_id"].isNull())
        {
            firstCourse2Id_=std::make_shared<uint64_t>(r["first_course_2_id"].as<uint64_t>());
        }
        if(!r["first_course_3_id"].isNull())
        {
            firstCourse3Id_=std::make_shared<uint64_t>(r["first_course_3_id"].as<uint64_t>());
        }
        if(!r["first_course_4_id"].isNull())
        {
            firstCourse4Id_=std::make_shared<uint64_t>(r["first_course_4_id"].as<uint64_t>());
        }
        if(!r["first_course_5_id"].isNull())
        {
            firstCourse5Id_=std::make_shared<uint64_t>(r["first_course_5_id"].as<uint64_t>());
        }
        if(!r["second_course_1_id"].isNull())
        {
            secondCourse1Id_=std::make_shared<uint64_t>(r["second_course_1_id"].as<uint64_t>());
        }
        if(!r["second_course_2_id"].isNull())
        {
            secondCourse2Id_=std::make_shared<uint64_t>(r["second_course_2_id"].as<uint64_t>());
        }
        if(!r["second_course_3_id"].isNull())
        {
            secondCourse3Id_=std::make_shared<uint64_t>(r["second_course_3_id"].as<uint64_t>());
        }
        if(!r["second_course_4_id"].isNull())
        {
            secondCourse4Id_=std::make_shared<uint64_t>(r["second_course_4_id"].as<uint64_t>());
        }
        if(!r["second_course_5_id"].isNull())
        {
            secondCourse5Id_=std::make_shared<uint64_t>(r["second_course_5_id"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            firstCourse1Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            firstCourse2Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            firstCourse3Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            firstCourse4Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            firstCourse5Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            secondCourse1Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            secondCourse2Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            secondCourse3Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            secondCourse4Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            secondCourse5Id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

MenusConfig::MenusConfig(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            firstCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            firstCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            firstCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            firstCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            secondCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            secondCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            secondCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            secondCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            secondCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
}

MenusConfig::MenusConfig(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_1_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["first_course_1_id"].isNull())
        {
            firstCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_1_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_2_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["first_course_2_id"].isNull())
        {
            firstCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_2_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_3_id"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["first_course_3_id"].isNull())
        {
            firstCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_3_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_4_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["first_course_4_id"].isNull())
        {
            firstCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_4_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_5_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["first_course_5_id"].isNull())
        {
            firstCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_5_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_1_id"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["second_course_1_id"].isNull())
        {
            secondCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_1_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_2_id"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["second_course_2_id"].isNull())
        {
            secondCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_2_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_3_id"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["second_course_3_id"].isNull())
        {
            secondCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_3_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_4_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["second_course_4_id"].isNull())
        {
            secondCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_4_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_5_id"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["second_course_5_id"].isNull())
        {
            secondCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_5_id"].asUInt64());
        }
    }
}

void MenusConfig::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            firstCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            firstCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            firstCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            firstCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            firstCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[5]].asUInt64());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            secondCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            secondCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            secondCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            secondCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            secondCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
}
                                                                    
void MenusConfig::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_1_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["first_course_1_id"].isNull())
        {
            firstCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_1_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_2_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["first_course_2_id"].isNull())
        {
            firstCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_2_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_3_id"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["first_course_3_id"].isNull())
        {
            firstCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_3_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_4_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["first_course_4_id"].isNull())
        {
            firstCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_4_id"].asUInt64());
        }
    }
    if(pJson.isMember("first_course_5_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["first_course_5_id"].isNull())
        {
            firstCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson["first_course_5_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_1_id"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["second_course_1_id"].isNull())
        {
            secondCourse1Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_1_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_2_id"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["second_course_2_id"].isNull())
        {
            secondCourse2Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_2_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_3_id"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["second_course_3_id"].isNull())
        {
            secondCourse3Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_3_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_4_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["second_course_4_id"].isNull())
        {
            secondCourse4Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_4_id"].asUInt64());
        }
    }
    if(pJson.isMember("second_course_5_id"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["second_course_5_id"].isNull())
        {
            secondCourse5Id_=std::make_shared<uint64_t>((uint64_t)pJson["second_course_5_id"].asUInt64());
        }
    }
}

const uint64_t &MenusConfig::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getId() const noexcept
{
    return id_;
}
const typename MenusConfig::PrimaryKeyType & MenusConfig::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint64_t &MenusConfig::getValueOfFirstCourse1Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(firstCourse1Id_)
        return *firstCourse1Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getFirstCourse1Id() const noexcept
{
    return firstCourse1Id_;
}
void MenusConfig::setFirstCourse1Id(const uint64_t &pFirstCourse1Id) noexcept
{
    firstCourse1Id_ = std::make_shared<uint64_t>(pFirstCourse1Id);
    dirtyFlag_[1] = true;
}


void MenusConfig::setFirstCourse1IdToNull() noexcept
{
    firstCourse1Id_.reset();
    dirtyFlag_[1] = true;
}

const uint64_t &MenusConfig::getValueOfFirstCourse2Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(firstCourse2Id_)
        return *firstCourse2Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getFirstCourse2Id() const noexcept
{
    return firstCourse2Id_;
}
void MenusConfig::setFirstCourse2Id(const uint64_t &pFirstCourse2Id) noexcept
{
    firstCourse2Id_ = std::make_shared<uint64_t>(pFirstCourse2Id);
    dirtyFlag_[2] = true;
}


void MenusConfig::setFirstCourse2IdToNull() noexcept
{
    firstCourse2Id_.reset();
    dirtyFlag_[2] = true;
}

const uint64_t &MenusConfig::getValueOfFirstCourse3Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(firstCourse3Id_)
        return *firstCourse3Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getFirstCourse3Id() const noexcept
{
    return firstCourse3Id_;
}
void MenusConfig::setFirstCourse3Id(const uint64_t &pFirstCourse3Id) noexcept
{
    firstCourse3Id_ = std::make_shared<uint64_t>(pFirstCourse3Id);
    dirtyFlag_[3] = true;
}


void MenusConfig::setFirstCourse3IdToNull() noexcept
{
    firstCourse3Id_.reset();
    dirtyFlag_[3] = true;
}

const uint64_t &MenusConfig::getValueOfFirstCourse4Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(firstCourse4Id_)
        return *firstCourse4Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getFirstCourse4Id() const noexcept
{
    return firstCourse4Id_;
}
void MenusConfig::setFirstCourse4Id(const uint64_t &pFirstCourse4Id) noexcept
{
    firstCourse4Id_ = std::make_shared<uint64_t>(pFirstCourse4Id);
    dirtyFlag_[4] = true;
}


void MenusConfig::setFirstCourse4IdToNull() noexcept
{
    firstCourse4Id_.reset();
    dirtyFlag_[4] = true;
}

const uint64_t &MenusConfig::getValueOfFirstCourse5Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(firstCourse5Id_)
        return *firstCourse5Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getFirstCourse5Id() const noexcept
{
    return firstCourse5Id_;
}
void MenusConfig::setFirstCourse5Id(const uint64_t &pFirstCourse5Id) noexcept
{
    firstCourse5Id_ = std::make_shared<uint64_t>(pFirstCourse5Id);
    dirtyFlag_[5] = true;
}


void MenusConfig::setFirstCourse5IdToNull() noexcept
{
    firstCourse5Id_.reset();
    dirtyFlag_[5] = true;
}

const uint64_t &MenusConfig::getValueOfSecondCourse1Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(secondCourse1Id_)
        return *secondCourse1Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getSecondCourse1Id() const noexcept
{
    return secondCourse1Id_;
}
void MenusConfig::setSecondCourse1Id(const uint64_t &pSecondCourse1Id) noexcept
{
    secondCourse1Id_ = std::make_shared<uint64_t>(pSecondCourse1Id);
    dirtyFlag_[6] = true;
}


void MenusConfig::setSecondCourse1IdToNull() noexcept
{
    secondCourse1Id_.reset();
    dirtyFlag_[6] = true;
}

const uint64_t &MenusConfig::getValueOfSecondCourse2Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(secondCourse2Id_)
        return *secondCourse2Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getSecondCourse2Id() const noexcept
{
    return secondCourse2Id_;
}
void MenusConfig::setSecondCourse2Id(const uint64_t &pSecondCourse2Id) noexcept
{
    secondCourse2Id_ = std::make_shared<uint64_t>(pSecondCourse2Id);
    dirtyFlag_[7] = true;
}


void MenusConfig::setSecondCourse2IdToNull() noexcept
{
    secondCourse2Id_.reset();
    dirtyFlag_[7] = true;
}

const uint64_t &MenusConfig::getValueOfSecondCourse3Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(secondCourse3Id_)
        return *secondCourse3Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getSecondCourse3Id() const noexcept
{
    return secondCourse3Id_;
}
void MenusConfig::setSecondCourse3Id(const uint64_t &pSecondCourse3Id) noexcept
{
    secondCourse3Id_ = std::make_shared<uint64_t>(pSecondCourse3Id);
    dirtyFlag_[8] = true;
}


void MenusConfig::setSecondCourse3IdToNull() noexcept
{
    secondCourse3Id_.reset();
    dirtyFlag_[8] = true;
}

const uint64_t &MenusConfig::getValueOfSecondCourse4Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(secondCourse4Id_)
        return *secondCourse4Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getSecondCourse4Id() const noexcept
{
    return secondCourse4Id_;
}
void MenusConfig::setSecondCourse4Id(const uint64_t &pSecondCourse4Id) noexcept
{
    secondCourse4Id_ = std::make_shared<uint64_t>(pSecondCourse4Id);
    dirtyFlag_[9] = true;
}


void MenusConfig::setSecondCourse4IdToNull() noexcept
{
    secondCourse4Id_.reset();
    dirtyFlag_[9] = true;
}

const uint64_t &MenusConfig::getValueOfSecondCourse5Id() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(secondCourse5Id_)
        return *secondCourse5Id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &MenusConfig::getSecondCourse5Id() const noexcept
{
    return secondCourse5Id_;
}
void MenusConfig::setSecondCourse5Id(const uint64_t &pSecondCourse5Id) noexcept
{
    secondCourse5Id_ = std::make_shared<uint64_t>(pSecondCourse5Id);
    dirtyFlag_[10] = true;
}


void MenusConfig::setSecondCourse5IdToNull() noexcept
{
    secondCourse5Id_.reset();
    dirtyFlag_[10] = true;
}

void MenusConfig::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &MenusConfig::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "first_course_1_id",
        "first_course_2_id",
        "first_course_3_id",
        "first_course_4_id",
        "first_course_5_id",
        "second_course_1_id",
        "second_course_2_id",
        "second_course_3_id",
        "second_course_4_id",
        "second_course_5_id"
    };
    return inCols;
}

void MenusConfig::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstCourse1Id())
        {
            binder << getValueOfFirstCourse1Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFirstCourse2Id())
        {
            binder << getValueOfFirstCourse2Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFirstCourse3Id())
        {
            binder << getValueOfFirstCourse3Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFirstCourse4Id())
        {
            binder << getValueOfFirstCourse4Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFirstCourse5Id())
        {
            binder << getValueOfFirstCourse5Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSecondCourse1Id())
        {
            binder << getValueOfSecondCourse1Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSecondCourse2Id())
        {
            binder << getValueOfSecondCourse2Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSecondCourse3Id())
        {
            binder << getValueOfSecondCourse3Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSecondCourse4Id())
        {
            binder << getValueOfSecondCourse4Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSecondCourse5Id())
        {
            binder << getValueOfSecondCourse5Id();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> MenusConfig::updateColumns() const
{
    std::vector<std::string> ret;
    for(size_t i=0;i<sizeof(dirtyFlag_);i++)
    {
        if(dirtyFlag_[i])
        {
            ret.push_back(getColumnName(i));
        }
    }
    return ret;
}

void MenusConfig::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFirstCourse1Id())
        {
            binder << getValueOfFirstCourse1Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getFirstCourse2Id())
        {
            binder << getValueOfFirstCourse2Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFirstCourse3Id())
        {
            binder << getValueOfFirstCourse3Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFirstCourse4Id())
        {
            binder << getValueOfFirstCourse4Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getFirstCourse5Id())
        {
            binder << getValueOfFirstCourse5Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getSecondCourse1Id())
        {
            binder << getValueOfSecondCourse1Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSecondCourse2Id())
        {
            binder << getValueOfSecondCourse2Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSecondCourse3Id())
        {
            binder << getValueOfSecondCourse3Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getSecondCourse4Id())
        {
            binder << getValueOfSecondCourse4Id();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getSecondCourse5Id())
        {
            binder << getValueOfSecondCourse5Id();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value MenusConfig::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFirstCourse1Id())
    {
        ret["first_course_1_id"]=(Json::UInt64)getValueOfFirstCourse1Id();
    }
    else
    {
        ret["first_course_1_id"]=Json::Value();
    }
    if(getFirstCourse2Id())
    {
        ret["first_course_2_id"]=(Json::UInt64)getValueOfFirstCourse2Id();
    }
    else
    {
        ret["first_course_2_id"]=Json::Value();
    }
    if(getFirstCourse3Id())
    {
        ret["first_course_3_id"]=(Json::UInt64)getValueOfFirstCourse3Id();
    }
    else
    {
        ret["first_course_3_id"]=Json::Value();
    }
    if(getFirstCourse4Id())
    {
        ret["first_course_4_id"]=(Json::UInt64)getValueOfFirstCourse4Id();
    }
    else
    {
        ret["first_course_4_id"]=Json::Value();
    }
    if(getFirstCourse5Id())
    {
        ret["first_course_5_id"]=(Json::UInt64)getValueOfFirstCourse5Id();
    }
    else
    {
        ret["first_course_5_id"]=Json::Value();
    }
    if(getSecondCourse1Id())
    {
        ret["second_course_1_id"]=(Json::UInt64)getValueOfSecondCourse1Id();
    }
    else
    {
        ret["second_course_1_id"]=Json::Value();
    }
    if(getSecondCourse2Id())
    {
        ret["second_course_2_id"]=(Json::UInt64)getValueOfSecondCourse2Id();
    }
    else
    {
        ret["second_course_2_id"]=Json::Value();
    }
    if(getSecondCourse3Id())
    {
        ret["second_course_3_id"]=(Json::UInt64)getValueOfSecondCourse3Id();
    }
    else
    {
        ret["second_course_3_id"]=Json::Value();
    }
    if(getSecondCourse4Id())
    {
        ret["second_course_4_id"]=(Json::UInt64)getValueOfSecondCourse4Id();
    }
    else
    {
        ret["second_course_4_id"]=Json::Value();
    }
    if(getSecondCourse5Id())
    {
        ret["second_course_5_id"]=(Json::UInt64)getValueOfSecondCourse5Id();
    }
    else
    {
        ret["second_course_5_id"]=Json::Value();
    }
    return ret;
}

Json::Value MenusConfig::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFirstCourse1Id())
            {
                ret[pMasqueradingVector[1]]=(Json::UInt64)getValueOfFirstCourse1Id();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getFirstCourse2Id())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfFirstCourse2Id();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFirstCourse3Id())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfFirstCourse3Id();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFirstCourse4Id())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfFirstCourse4Id();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getFirstCourse5Id())
            {
                ret[pMasqueradingVector[5]]=(Json::UInt64)getValueOfFirstCourse5Id();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getSecondCourse1Id())
            {
                ret[pMasqueradingVector[6]]=(Json::UInt64)getValueOfSecondCourse1Id();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getSecondCourse2Id())
            {
                ret[pMasqueradingVector[7]]=(Json::UInt64)getValueOfSecondCourse2Id();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSecondCourse3Id())
            {
                ret[pMasqueradingVector[8]]=(Json::UInt64)getValueOfSecondCourse3Id();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getSecondCourse4Id())
            {
                ret[pMasqueradingVector[9]]=(Json::UInt64)getValueOfSecondCourse4Id();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getSecondCourse5Id())
            {
                ret[pMasqueradingVector[10]]=(Json::UInt64)getValueOfSecondCourse5Id();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFirstCourse1Id())
    {
        ret["first_course_1_id"]=(Json::UInt64)getValueOfFirstCourse1Id();
    }
    else
    {
        ret["first_course_1_id"]=Json::Value();
    }
    if(getFirstCourse2Id())
    {
        ret["first_course_2_id"]=(Json::UInt64)getValueOfFirstCourse2Id();
    }
    else
    {
        ret["first_course_2_id"]=Json::Value();
    }
    if(getFirstCourse3Id())
    {
        ret["first_course_3_id"]=(Json::UInt64)getValueOfFirstCourse3Id();
    }
    else
    {
        ret["first_course_3_id"]=Json::Value();
    }
    if(getFirstCourse4Id())
    {
        ret["first_course_4_id"]=(Json::UInt64)getValueOfFirstCourse4Id();
    }
    else
    {
        ret["first_course_4_id"]=Json::Value();
    }
    if(getFirstCourse5Id())
    {
        ret["first_course_5_id"]=(Json::UInt64)getValueOfFirstCourse5Id();
    }
    else
    {
        ret["first_course_5_id"]=Json::Value();
    }
    if(getSecondCourse1Id())
    {
        ret["second_course_1_id"]=(Json::UInt64)getValueOfSecondCourse1Id();
    }
    else
    {
        ret["second_course_1_id"]=Json::Value();
    }
    if(getSecondCourse2Id())
    {
        ret["second_course_2_id"]=(Json::UInt64)getValueOfSecondCourse2Id();
    }
    else
    {
        ret["second_course_2_id"]=Json::Value();
    }
    if(getSecondCourse3Id())
    {
        ret["second_course_3_id"]=(Json::UInt64)getValueOfSecondCourse3Id();
    }
    else
    {
        ret["second_course_3_id"]=Json::Value();
    }
    if(getSecondCourse4Id())
    {
        ret["second_course_4_id"]=(Json::UInt64)getValueOfSecondCourse4Id();
    }
    else
    {
        ret["second_course_4_id"]=Json::Value();
    }
    if(getSecondCourse5Id())
    {
        ret["second_course_5_id"]=(Json::UInt64)getValueOfSecondCourse5Id();
    }
    else
    {
        ret["second_course_5_id"]=Json::Value();
    }
    return ret;
}

bool MenusConfig::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("first_course_1_id"))
    {
        if(!validJsonOfField(1, "first_course_1_id", pJson["first_course_1_id"], err, true))
            return false;
    }
    if(pJson.isMember("first_course_2_id"))
    {
        if(!validJsonOfField(2, "first_course_2_id", pJson["first_course_2_id"], err, true))
            return false;
    }
    if(pJson.isMember("first_course_3_id"))
    {
        if(!validJsonOfField(3, "first_course_3_id", pJson["first_course_3_id"], err, true))
            return false;
    }
    if(pJson.isMember("first_course_4_id"))
    {
        if(!validJsonOfField(4, "first_course_4_id", pJson["first_course_4_id"], err, true))
            return false;
    }
    if(pJson.isMember("first_course_5_id"))
    {
        if(!validJsonOfField(5, "first_course_5_id", pJson["first_course_5_id"], err, true))
            return false;
    }
    if(pJson.isMember("second_course_1_id"))
    {
        if(!validJsonOfField(6, "second_course_1_id", pJson["second_course_1_id"], err, true))
            return false;
    }
    if(pJson.isMember("second_course_2_id"))
    {
        if(!validJsonOfField(7, "second_course_2_id", pJson["second_course_2_id"], err, true))
            return false;
    }
    if(pJson.isMember("second_course_3_id"))
    {
        if(!validJsonOfField(8, "second_course_3_id", pJson["second_course_3_id"], err, true))
            return false;
    }
    if(pJson.isMember("second_course_4_id"))
    {
        if(!validJsonOfField(9, "second_course_4_id", pJson["second_course_4_id"], err, true))
            return false;
    }
    if(pJson.isMember("second_course_5_id"))
    {
        if(!validJsonOfField(10, "second_course_5_id", pJson["second_course_5_id"], err, true))
            return false;
    }
    return true;
}
bool MenusConfig::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                     const std::vector<std::string> &pMasqueradingVector,
                                                     std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty())
    {
        if(pJson.isMember(pMasqueradingVector[0]))
        {
            if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[1].empty())
    {
        if(pJson.isMember(pMasqueradingVector[1]))
        {
            if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[2].empty())
    {
        if(pJson.isMember(pMasqueradingVector[2]))
        {
            if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[3].empty())
    {
        if(pJson.isMember(pMasqueradingVector[3]))
        {
            if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[4].empty())
    {
        if(pJson.isMember(pMasqueradingVector[4]))
        {
            if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[5].empty())
    {
        if(pJson.isMember(pMasqueradingVector[5]))
        {
            if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[6].empty())
    {
        if(pJson.isMember(pMasqueradingVector[6]))
        {
            if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[7].empty())
    {
        if(pJson.isMember(pMasqueradingVector[7]))
        {
            if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[8].empty())
    {
        if(pJson.isMember(pMasqueradingVector[8]))
        {
            if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[9].empty())
    {
        if(pJson.isMember(pMasqueradingVector[9]))
        {
            if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                return false;
        }
    }
    if(!pMasqueradingVector[10].empty())
    {
        if(pJson.isMember(pMasqueradingVector[10]))
        {
            if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                return false;
        }
    }
    return true;
}
bool MenusConfig::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("first_course_1_id"))
    {
        if(!validJsonOfField(1, "first_course_1_id", pJson["first_course_1_id"], err, false))
            return false;
    }
    if(pJson.isMember("first_course_2_id"))
    {
        if(!validJsonOfField(2, "first_course_2_id", pJson["first_course_2_id"], err, false))
            return false;
    }
    if(pJson.isMember("first_course_3_id"))
    {
        if(!validJsonOfField(3, "first_course_3_id", pJson["first_course_3_id"], err, false))
            return false;
    }
    if(pJson.isMember("first_course_4_id"))
    {
        if(!validJsonOfField(4, "first_course_4_id", pJson["first_course_4_id"], err, false))
            return false;
    }
    if(pJson.isMember("first_course_5_id"))
    {
        if(!validJsonOfField(5, "first_course_5_id", pJson["first_course_5_id"], err, false))
            return false;
    }
    if(pJson.isMember("second_course_1_id"))
    {
        if(!validJsonOfField(6, "second_course_1_id", pJson["second_course_1_id"], err, false))
            return false;
    }
    if(pJson.isMember("second_course_2_id"))
    {
        if(!validJsonOfField(7, "second_course_2_id", pJson["second_course_2_id"], err, false))
            return false;
    }
    if(pJson.isMember("second_course_3_id"))
    {
        if(!validJsonOfField(8, "second_course_3_id", pJson["second_course_3_id"], err, false))
            return false;
    }
    if(pJson.isMember("second_course_4_id"))
    {
        if(!validJsonOfField(9, "second_course_4_id", pJson["second_course_4_id"], err, false))
            return false;
    }
    if(pJson.isMember("second_course_5_id"))
    {
        if(!validJsonOfField(10, "second_course_5_id", pJson["second_course_5_id"], err, false))
            return false;
    }
    return true;
}
bool MenusConfig::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
            return false;
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
            return false;
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
            return false;
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
            return false;
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
            return false;
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
            return false;
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
            return false;
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
            return false;
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
            return false;
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
            return false;
    }
    return true;
}
bool MenusConfig::validJsonOfField(size_t index,
                                   const std::string &fieldName,
                                   const Json::Value &pJson, 
                                   std::string &err, 
                                   bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }        
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
     
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
